// Driver for 16_graph_largest_component for Serial, OpenMP, MPI, and MPI+OpenMP
// /* Return the number of vertices in the largest component of the undirected graph defined by the adjacency matrix A.
//    A is an NxN adjacency matrix stored in row-major. A is an undirected graph.
//    Example:
// 
// 	 input: [[0, 1, 0, 0], [1, 0, 0, 0], [0, 0, 0, 1], [0, 0, 1, 0]]
//    output: 2
// */
// int largestComponent(std::vector<int> const& A, size_t N) {

#include <algorithm>
#include <cmath>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

#include <omp.h>

struct Context {
    std::vector<int> A;
    size_t N;
};

void fillRandomUndirectedGraph(std::vector<int> &A, size_t N, std::mt19937& engine) {
    fillRandomUndirectedGraph_(A, N, engine);
}

void reset(Context *ctx, std::mt19937& engine) {
    fillRandomUndirectedGraph(ctx->A, ctx->N, engine);
    BCAST(ctx->A, INT);
}

Context *init() {
    Context *ctx = new Context();

    ctx->N = DRIVER_PROBLEM_SIZE;
    ctx->A.resize(ctx->N * ctx->N);

    // reset(ctx);
    return ctx;
}

Context* copy(Context* ctx) {
    Context* new_ctx = new Context();
    *new_ctx = *ctx;
    return new_ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    int lc = submission::largestComponent(ctx->A, ctx->N);
    (void)lc;
    asm volatile ("" : "+r"(lc));  // Prevents compiler from optimizing var away
}

void NO_OPTIMIZE best(Context *ctx) {
    int lc = correctLargestComponent(ctx->A, ctx->N);
    (void)lc;
    asm volatile ("" : "+r"(lc));  // Prevents compiler from optimizing var away
}

bool validate(Context *ctx, std::mt19937& engine) {
    const size_t TEST_SIZE = DRIVER_PROBLEM_SIZE;

    std::vector<int> A(TEST_SIZE * TEST_SIZE);

    int rank;
    GET_RANK(rank);

    // set up input
    fillRandomUndirectedGraph(A, TEST_SIZE, engine);
    BCAST(A, INT);

    // compute correct result
    int correct = correctLargestComponent(A, TEST_SIZE);

    // compute test result
    int test = submission::largestComponent(A, TEST_SIZE);
    SYNC();
        
    bool isCorrect = true;
    if (IS_ROOT(rank) && correct != test) {
        isCorrect = false;
    }
    BCAST_PTR(&isCorrect, 1, CXX_BOOL);
    if (!isCorrect) {
        return false;
    }

    return true;

    /*
    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        fillRandomUndirectedGraph(A, TEST_SIZE);
        BCAST(A, INT);

        // compute correct result
        int correct = correctLargestComponent(A, TEST_SIZE);

        // compute test result
        int test = submission::largestComponent(A, TEST_SIZE);
        SYNC();
        
        bool isCorrect = true;
        if (IS_ROOT(rank) && correct != test) {
            isCorrect = false;
        }
        BCAST_PTR(&isCorrect, 1, CXX_BOOL);
        if (!isCorrect) {
            return false;
        }
    }

    return true;
    */
}

void destroy(Context *ctx) {
    delete ctx;
}
