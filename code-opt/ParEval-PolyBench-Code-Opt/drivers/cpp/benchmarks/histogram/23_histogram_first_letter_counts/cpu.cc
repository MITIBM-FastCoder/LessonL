// Driver for 23_histogram_first_letter_counts for Serial, OpenMP, MPI, and MPI+OpenMP
// /* For each letter in the alphabet, count the number of strings in the vector s that start with that letter.
//    Assume all strings are in lower case. Store the output in `bins` array.
//    Example:
// 
//    input: ["dog", "cat", "xray", "cow", "code", "type", "flower"]
//    output: [0, 0, 3, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0]
// */
// void firstLetterCounts(std::vector<std::string> const& s, std::array<size_t, 26> &bins) {

#include <array>
#include <algorithm>
#include <cmath>
#include <numeric>
#include <random>
#include <string>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

struct Context {
    std::vector<std::string> s;
    std::array<size_t, 26> bins;
};

void reset(Context *ctx, std::mt19937& engine) {
    /* for this it doesn't matter if every process has the same data */
    const std::string characters = "abcdefghijklmnopqrstuvwxyz";
    std::uniform_int_distribution<> char_dist(0, 25);
    std::uniform_int_distribution<> len_dist(2, 10);

    auto gen = [&](){
	auto len = len_dist(engine);
	std::string randomString;
        for (int i = 0; i < len; i++) {
            randomString += characters[char_dist(engine)];
        }
	return randomString;
    };

    std::generate(ctx->s.begin(), ctx->s.end(), gen);

    // fillRandString(ctx->s, 2, 10);
    ctx->bins.fill(0);
}

Context *init() {
    Context *ctx = new Context();

    ctx->s.resize(DRIVER_PROBLEM_SIZE);

    // reset(ctx);
    return ctx;
}

Context* copy(Context* ctx) {
    Context* new_ctx = new Context();
    *new_ctx = *ctx;
    return new_ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    submission::firstLetterCounts(ctx->s, ctx->bins);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctFirstLetterCounts(ctx->s, ctx->bins);
}

bool validate(Context *ctx, std::mt19937& engine) {
    const size_t TEST_SIZE = DRIVER_PROBLEM_SIZE;

    std::vector<std::string> s(TEST_SIZE);
    std::array<size_t, 26> correct, test;
    std::vector<char> firstLetters(TEST_SIZE);

    int rank;
    GET_RANK(rank);

    const std::string characters = "abcdefghijklmnopqrstuvwxyz";
    std::uniform_int_distribution<> char_dist(0, 25);
    std::uniform_int_distribution<> len_dist(2, 10);

    auto randStringGen = [&](){
	auto len = len_dist(engine);
	std::string randomString;
        for (int i = 0; i < len; i++) {
            randomString += characters[char_dist(engine)];
        }
	return randomString;
    };

    std::generate(s.begin(), s.end(), randStringGen);
    // fillRandString(s, 2, 10);

    // set up input
    for (int j = 0; j < firstLetters.size(); j += 1) {
        firstLetters[j] = rand() % 26 + 'a';
    }
    BCAST(firstLetters, CHAR);

    for (int j = 0; j < s.size(); j += 1) {
        s[j][0] = firstLetters[j];  // ensure every rank at least has the same first letters
    }

    correct.fill(0);
    test.fill(0);

    // compute correct result
    correctFirstLetterCounts(s, correct);

    // compute test result
    submission::firstLetterCounts(s, test);
    SYNC();
        
    bool isCorrect = true;
    if (IS_ROOT(rank) && !std::equal(correct.begin(), correct.end(), test.begin())) {
        isCorrect = false;
    }
    BCAST_PTR(&isCorrect, 1, CXX_BOOL);
    if (!isCorrect) {
       return false;
    }

    return true;

    /*
    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int i = 0; i < numTries; i += 1) {
        // set up input
        for (int j = 0; j < firstLetters.size(); j += 1) {
            firstLetters[j] = rand() % 26 + 'a';
        }
        BCAST(firstLetters, CHAR);

        fillRandString(s, 2, 10);
        for (int j = 0; j < s.size(); j += 1) {
            s[j][0] = firstLetters[j];  // ensure every rank at least has the same first letters
        }
        correct.fill(0);
        test.fill(0);

        // compute correct result
        correctFirstLetterCounts(s, correct);

        // compute test result
	submission::firstLetterCounts(s, test);
        SYNC();
        
        bool isCorrect = true;
        if (IS_ROOT(rank) && !std::equal(correct.begin(), correct.end(), test.begin())) {
            isCorrect = false;
        }
        BCAST_PTR(&isCorrect, 1, CXX_BOOL);
        if (!isCorrect) {
            return false;
        }
    }

    return true;
    */
}

void destroy(Context *ctx) {
    delete ctx;
}
