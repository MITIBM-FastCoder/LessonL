// Driver for 36_search_check_if_array_contains_value
// /* Return true if the vector x contains the value `target`. Return false otherwise.
//    Examples:
// 
//    input: x=[1, 8, 2, 6, 4, 6], target=3
//    output: false
//    
//    input: x=[1, 8, 2, 6, 4, 6], target=8
//    output: true
// */
// bool contains(std::vector<int> const& x, int target) {

#include <algorithm>
#include <cmath>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM


struct Context {
    std::vector<int> x;
    int target;
};

void reset(Context *ctx, std::mt19937& engine) {
    std::uniform_int_distribution<> rand_bit_dist(0, 1);
    auto rand_bit = rand_bit_dist(engine);

    std::uniform_int_distribution<> dist(-1e8, 1e8);
    auto gen = [&](){ return dist(engine); };

    std::generate(ctx->x.begin(), ctx->x.end(), gen);
    if (rand_bit == 0) {
        std::uniform_int_distribution<> idx_dist(0, ctx->x.size() - 1);
	auto rand_idx = idx_dist(engine);
	ctx->target = ctx->x[rand_idx];
    } else {
	ctx->target = 1e8 + 1;
    }

    // fillRand(ctx->x, -50, 50);
    // ctx->target = (rand() % 200) - 100;
    BCAST(ctx->x, INT);
    BCAST_PTR(&ctx->target, 1, INT);
}

Context *init() {
    Context *ctx = new Context();
    ctx->x.resize(DRIVER_PROBLEM_SIZE);
    // reset(ctx);
    return ctx;
}

Context* copy(Context* ctx) {
    Context* new_ctx = new Context();
    *new_ctx = *ctx;
    return new_ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    size_t idx = submission::contains(ctx->x, ctx->target);
    (void)idx;
    asm volatile ("" : "+r"(idx));  // Prevents compiler from optimizing var away
}

void NO_OPTIMIZE best(Context *ctx) {
    size_t idx = correctContains(ctx->x, ctx->target);
    (void)idx;
    asm volatile ("" : "+r"(idx));  // Prevents compiler from optimizing var away
}

bool validate(Context *ctx, std::mt19937& engine) {
    int rank;
    GET_RANK(rank);

    std::vector<int> input(DRIVER_PROBLEM_SIZE);

    std::uniform_int_distribution<> dist(-1e8, 1e8);
    auto gen = [&](){ return dist(engine); };

    std::generate(input.begin(), input.end(), gen);
    std::uniform_int_distribution<> idx_dist(0, ctx->x.size() - 1);
    auto rand_idx = idx_dist(engine);

    // target not in list
    int target = 1e8 + 1;
    BCAST(input, INT);
    BCAST_PTR(&target, 1, INT);

    // compute correct result
    size_t correctIdx = correctContains(input, target);

    // compute test result
    size_t testIdx = submission::contains(input, target);
    SYNC();
        
    bool isCorrect = true;
    if (IS_ROOT(rank) && correctIdx != testIdx) {
        isCorrect = false;
    }
    BCAST_PTR(&isCorrect, 1, CXX_BOOL);
    if (!isCorrect) {
        return false;
    }

    // target is in list
    target = input[rand_idx];
    BCAST(input, INT);
    BCAST_PTR(&target, 1, INT);

    // compute correct result
    correctIdx = correctContains(input, target);

    // compute test result
    testIdx = submission::contains(input, target);
    SYNC();
        
    if (IS_ROOT(rank) && correctIdx != testIdx) {
        isCorrect = false;
    }
    BCAST_PTR(&isCorrect, 1, CXX_BOOL);
    if (!isCorrect) {
        return false;
    }

    return true;

    /*
    const size_t numTries = 10;
    for (int i = 0; i < numTries; i += 1) {
        std::vector<int> input(1024);
        fillRand(input, -50, 50);
        int target;
        if (i == 1) {
            target = input[rand() % input.size()];
        } else {
            target = (rand() % 200) - 100;
        }
        BCAST(input, INT);
        BCAST_PTR(&target, 1, INT);

        // compute correct result
        size_t correctIdx = correctContains(input, target);

        // compute test result
        size_t testIdx = submission::contains(input, target);
        SYNC();
        
        bool isCorrect = true;
        if (IS_ROOT(rank) && correctIdx != testIdx) {
            isCorrect = false;
        }
        BCAST_PTR(&isCorrect, 1, CXX_BOOL);
        if (!isCorrect) {
            return false;
        }
    }

    return true;
    */
}

void destroy(Context *ctx) {
    delete ctx;
}


