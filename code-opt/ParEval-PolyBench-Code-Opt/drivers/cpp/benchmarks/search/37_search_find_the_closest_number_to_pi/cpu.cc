// Driver for 37_search_find_the_closest_number_to_pi for Serial, OpenMP, MPI, and MPI+OpenMP
// /* Return the index of the value in the vector x that is closest to the math constant PI.
//    Use M_PI for the value of PI.
//    Example:
// 
//    input: [9.18, 3.05, 7.24, 11.3, -166.49, 2.1]
//    output: 1
// */
// size_t findClosestToPi(std::vector<double> const& x) {

#include <algorithm>
#include <cmath>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

struct Context {
    std::vector<double> x;
};

void reset(Context *ctx, std::mt19937& engine) {
    std::uniform_real_distribution<> dist(-10000.0, 10000.0);

    auto gen = [&](){ return dist(engine); };

    std::generate(ctx->x.begin(), ctx->x.end(), gen);
    // fillRand(ctx->x, -10000.0, 10000.0);
    BCAST(ctx->x, DOUBLE);
}

Context *init() {
    Context *ctx = new Context();
    ctx->x.resize(DRIVER_PROBLEM_SIZE);
    // reset(ctx);
    return ctx;
}

Context* copy(Context* ctx) {
    Context* new_ctx = new Context();
    *new_ctx = *ctx;
    return new_ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    size_t idx = submission::findClosestToPi(ctx->x);
    (void)idx;
    asm volatile ("" : "+r"(idx));  // Prevents compiler from optimizing var away
}

void NO_OPTIMIZE best(Context *ctx) {
    size_t idx = correctFindClosestToPi(ctx->x);
    (void)idx;
    asm volatile ("" : "+r"(idx));  // Prevents compiler from optimizing var away
}

bool validate(Context *ctx, std::mt19937& engine) {
    const size_t TEST_SIZE = DRIVER_PROBLEM_SIZE;

    int rank;
    GET_RANK(rank);

    // set up input
    std::vector<double> input(TEST_SIZE);
    std::uniform_real_distribution<> dist(-10000.0, 10000.0);

    auto gen = [&](){ return dist(engine); };

    std::generate(input.begin(), input.end(), gen);
    // fillRand(input, 100.0, 1000.0);
    // input[rand() % TEST_SIZE] = 10.0;
    BCAST(input, DOUBLE);

    // compute correct result
    size_t correct_idx = correctFindClosestToPi(input);

    // compute test result
    size_t test_idx = submission::findClosestToPi(input);
    SYNC();
        
    bool isCorrect = true;
    if (IS_ROOT(rank) && correct_idx != test_idx) {
        isCorrect = false;
    }
    BCAST_PTR(&isCorrect, 1, CXX_BOOL);
    if (!isCorrect) {
        return false;
    }

    return true;

    /*
    const size_t numTries = 10;
    for (int i = 0; i < numTries; i += 1) {
        // set up input
        std::vector<double> input(TEST_SIZE);
        fillRand(input, 100.0, 1000.0);
        input[rand() % TEST_SIZE] = 10.0;
        BCAST(input, DOUBLE);

        // compute correct result
        size_t correct = correctFindClosestToPi(input);

        // compute test result
        size_t test = submission::findClosestToPi(input);
        SYNC();
        
        bool isCorrect = true;
        if (IS_ROOT(rank) && correct != test) {
            isCorrect = false;
        }
        BCAST_PTR(&isCorrect, 1, CXX_BOOL);
        if (!isCorrect) {
            return false;
        }
    }

    return true;
    */
}

void destroy(Context *ctx) {
    delete ctx;
}
