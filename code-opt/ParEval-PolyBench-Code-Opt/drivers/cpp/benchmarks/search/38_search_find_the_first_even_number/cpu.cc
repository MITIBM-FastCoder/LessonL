// Driver for 38_search_find_the_first_even_number for Serial, OpenMP, MPI, and MPI+OpenMP
// /* Return the index of the first even number in the vector x.
//    Examples:
// 
//    input: [7, 3, 9, 5, 5, 7, 2, 9, 12, 11]
//    output: 6
// 
//    input: [3, 8, 9, 9, 3, 4, 8, 6]
//    output: 1
// */
// size_t findFirstEven(std::vector<int> const& x) {

#include <algorithm>
#include <cmath>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

struct Context {
    std::vector<int> x;
};

void reset(Context *ctx, std::mt19937& engine) {
    std::uniform_int_distribution<> dist(1, 20);
    // this ensures all of the numbers generated are odd.
    auto gen = [&](){ return 2 * dist(engine) + 1; };

    std::generate(ctx->x.begin(), ctx->x.end(), gen);

    // fillRand(ctx->x, 1, 20);
    // make two values in the middle quadrants even
    // size_t min = ctx->x.size() / 4;
    // size_t max = 3 * ctx->x.size() / 4;
    // ctx->x[rand() % (max - min) + min] += 1;
    // ctx->x[rand() % (max - min) + min] += 1;

    std::uniform_int_distribution<> idx_dist(ctx->x.size() / 4, ctx->x.size() * 3 / 4);
    int idx = idx_dist(engine);
    ctx->x[idx] += 1;
    /*
    for (int i = 0; i < ctx->x.size() / 8; i++) {
	int idx = idx_dist(engine);
        ctx->x[idx] += 1;
    }
    */

    BCAST(ctx->x, INT);
}

Context *init() {
    Context *ctx = new Context();

    ctx->x.resize(DRIVER_PROBLEM_SIZE);

    // reset(ctx);
    return ctx;
}

Context* copy(Context* ctx) {
    Context* new_ctx = new Context();
    *new_ctx = *ctx;
    return new_ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    size_t idx = submission::findFirstEven(ctx->x);
    (void)idx;
    asm volatile ("" : "+r"(idx));  // Prevents compiler from optimizing var away
}

void NO_OPTIMIZE best(Context *ctx) {
    size_t idx = correctFindFirstEven(ctx->x);
    (void)idx;
    asm volatile ("" : "+r"(idx));  // Prevents compiler from optimizing var away
}

bool validate(Context *ctx, std::mt19937& engine) {
    const size_t TEST_SIZE = DRIVER_PROBLEM_SIZE;

    int rank;
    GET_RANK(rank);

    // set up input
    std::vector<int> x(DRIVER_PROBLEM_SIZE);
    std::uniform_int_distribution<> dist(1, 20);
    // makes everything odd
    auto gen = [&](){ return 2 * dist(engine) + 1; };

    std::generate(x.begin(), x.end(), gen);

    // fillRand(ctx->x, 1, 20);

    std::uniform_int_distribution<> idx_dist(x.size() / 4, x.size() * 3 / 4);
    int idx = idx_dist(engine);
    x[idx] += 1;
    /*
    for (int i = 0; i < x.size() / 8; i++) {
	int idx = idx_dist(engine);
        x[idx] += 1;
    }
    */

    BCAST(x, INT);

    // compute correct result
    size_t correct_idx = correctFindFirstEven(x);

    // compute test result
    size_t test_idx = submission::findFirstEven(x);
    SYNC();
        
    bool isCorrect = true;
    if (IS_ROOT(rank) && correct_idx != test_idx) {
        isCorrect = false;
    }
    BCAST_PTR(&isCorrect, 1, CXX_BOOL);
    if (!isCorrect) {
        return false;
    }

    return true;

    /*
    const size_t numTries = 10;
    for (int i = 0; i < numTries; i += 1) {
        // set up input
        std::vector<int> x(TEST_SIZE);
        fillRand(x, 1, 100);
        if (i == 1) {
            for (size_t j = 0; j < 20; j += 1) {
                x[j] = 2 * (rand() % 50) + 1;
            }
        }
        BCAST(x, INT);

        // compute correct result
        size_t correct = correctFindFirstEven(x);

        // compute test result
        size_t test = submission::findFirstEven(x);
        SYNC();
        
        bool isCorrect = true;
        if (IS_ROOT(rank) && correct != test) {
            isCorrect = false;
        }
        BCAST_PTR(&isCorrect, 1, CXX_BOOL);
        if (!isCorrect) {
            return false;
        }
    }

    return true;
    */
}

void destroy(Context *ctx) {
    delete ctx;
}
