// Driver for 02_dense_la_gemm for Serial, OpenMP, MPI, and MPI+OpenMP
// /* Multiply the matrix A by the matrix B. Store the results in the matrix C.
//    A is an MxK matrix, B is a KxN matrix, and C is a MxN matrix. The matrices are stored in row-major.
//    Example:
// 
//    input: A=[[1, -1, 2], [0, -2, 1]] B=[[4, 1], [-1, 0], [2, 2]]
//    output: C=[[9, 5], [4, 2]]
// */
// void gemm(std::vector<double> const& A, std::vector<double> const& B, std::vector<double> &C, size_t M, size_t K, size_t N) {

#include <algorithm>
#include <chrono>
#include <cmath>
#include <iostream>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

struct Context {
    std::vector<std::vector<double>> A, B;
    size_t tsteps, n;
};

void reset(Context *ctx, std::mt19937& engine) {
    for (int i = 0; i < ctx->n; i++) {
	for (int j = 0; j < ctx->n; j++) {
	    ctx->A[i][j] = (i*(j+2) + 2) * 1.0 / ctx->n;
	    ctx->B[i][j] = (i*(j+3) + 3) * 1.0 / ctx->n;
	}
    }
}

Context *init() {
    Context *ctx = new Context();

    ctx->tsteps = 500;
    ctx->n = DRIVER_PROBLEM_SIZE;

    ctx->A.resize(ctx->n);
    ctx->B.resize(ctx->n);

    for (int i = 0; i < ctx->n; i++) {
	ctx->A[i].resize(ctx->n);
	ctx->B[i].resize(ctx->n);
    }

    // reset(ctx);
    return ctx;
}

Context* copy(Context* ctx) {
    Context* new_ctx = new Context();
    *new_ctx = *ctx;
    return new_ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    submission::kernel_jacobi_2d(ctx->tsteps, ctx->n, ctx->A, ctx->B);
}

void NO_OPTIMIZE best(Context *ctx) {
    correct_kernel_jacobi_2d(ctx->tsteps, ctx->n, ctx->A, ctx->B);
}

bool validate(Context *ctx, std::mt19937& engine) {
    const size_t TEST_SIZE = DRIVER_PROBLEM_SIZE;
    
    int n = TEST_SIZE;
    int tsteps = 500;

    std::vector<std::vector<double>> A_correct;
    std::vector<std::vector<double>> A_test;

    std::vector<std::vector<double>> B_correct;
    std::vector<std::vector<double>> B_test;

    A_correct.resize(n);
    B_correct.resize(n);
    A_test.resize(n);
    B_test.resize(n);

    for (int i = 0; i < n; i++) {
	A_correct[i].resize(n);
	B_correct[i].resize(n);
	A_test[i].resize(n);
	B_test[i].resize(n);
    }

    // set up input
    for (int i = 0; i < n; i++) {
	for (int j = 0; j < n; j++) {
	    A_correct[i][j] = (i*(j+2) + 2) * 1.0 / n;
	    B_correct[i][j] = (i*(j+3) + 3) * 1.0 / n;
	    A_test[i][j] = (i*(j+2) + 2) * 1.0 / n;
	    B_test[i][j] = (i*(j+3) + 3) * 1.0 / n;
	}
    }
    
    // compute correct result
    correct_kernel_jacobi_2d(tsteps, n, A_correct, B_correct);

    // compute test result
    submission::kernel_jacobi_2d(tsteps, n, A_test, B_test);
    
    bool isCorrect = true;

    for (int i = 0; i < TEST_SIZE; i++) {
	if (!fequal(A_correct[i], A_test[i], 1e-4)) {
	    isCorrect = false;
	    break;
	}

	if (!fequal(B_correct[i], B_test[i], 1e-4)) {
	    isCorrect = false;
	    break;
	}
    }

    if (!isCorrect) {
	return false;
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}

