// Driver for 02_dense_la_gemm for Serial, OpenMP, MPI, and MPI+OpenMP
// /* Multiply the matrix A by the matrix B. Store the results in the matrix C.
//    A is an MxK matrix, B is a KxN matrix, and C is a MxN matrix. The matrices are stored in row-major.
//    Example:
// 
//    input: A=[[1, -1, 2], [0, -2, 1]] B=[[4, 1], [-1, 0], [2, 2]]
//    output: C=[[9, 5], [4, 2]]
// */
// void gemm(std::vector<double> const& A, std::vector<double> const& B, std::vector<double> &C, size_t M, size_t K, size_t N) {

#include <algorithm>
#include <chrono>
#include <cmath>
#include <iostream>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

struct Context {
    std::vector<std::vector<double>> data, corr;
    std::vector<double> mean, stddev;
    size_t n, m;
};

void reset(Context *ctx, std::mt19937& engine) {
    for (int i = 0; i < ctx->n; i++) {
	for (int j = 0; j < ctx->m; j++) {
	    ctx->data[i][j] = (i * j) / ctx->m + i;
	}
    }
}

Context *init() {
    Context *ctx = new Context();

    ctx->n = DRIVER_PROBLEM_SIZE;
    ctx->m = DRIVER_PROBLEM_SIZE / 2;

    ctx->data.resize(ctx->n);
    for (int i = 0; i < ctx->n; i++) {
	ctx->data[i].resize(ctx->m);
    }

    ctx->corr.resize(ctx->m);
    for (int i = 0; i < ctx->m; i++) {
	ctx->corr[i].resize(ctx->m);
    }

    ctx->mean.resize(ctx->m);
    ctx->stddev.resize(ctx->m);

    // reset(ctx);
    return ctx;
}

Context* copy(Context* ctx) {
    Context* new_ctx = new Context();
    *new_ctx = *ctx;
    return new_ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    submission::kernel_correlation(ctx->m, ctx->n, ctx->data, ctx->corr, ctx->mean, ctx->stddev);
}

void NO_OPTIMIZE best(Context *ctx) {
    correct_kernel_correlation(ctx->m, ctx->n, ctx->data, ctx->corr, ctx->mean, ctx->stddev);
}

bool validate(Context *ctx, std::mt19937& engine) {
    const size_t TEST_SIZE = DRIVER_PROBLEM_SIZE;

    std::vector<std::vector<double>> data;
    std::vector<std::vector<double>> data_test;

    std::vector<std::vector<double>> corr_correct;
    std::vector<std::vector<double>> corr_test;

    int n = TEST_SIZE;
    int m = TEST_SIZE / 2;

    data.resize(n);
    data_test.resize(n);

    corr_correct.resize(m);
    corr_test.resize(m);

    for (int i = 0; i < n; i++) {
	data[i].resize(m);
	data_test[i].resize(m);
    }

    for (int i = 0; i < m; i++) {
	corr_correct[i].resize(m);
	corr_test[i].resize(m);
    }

    std::vector<double> mean, stddev;
    mean.resize(m);
    stddev.resize(m);

    // set up input
    
    for (int i = 0; i < n; i++) {
	for (int j = 0; j < m; j++) {
	    data[i][j] = (i * j) / m + i;
	}
    }

    data_test = data;
	
    // compute correct result
    correct_kernel_correlation(m, n, data, corr_correct, mean, stddev);

    // compute test result
    submission::kernel_correlation(m, n, data_test, corr_test, mean, stddev);
    
    bool isCorrect = true;
    for (int i = 0; i < m; i++) {
	if (!fequal(corr_correct[i], corr_test[i], 1e-4)) {
	    isCorrect = false;
	}
    }

    if (!isCorrect) {
	return false;
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}

