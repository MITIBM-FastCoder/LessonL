// Driver for 15_graph_edge_count for Serial, OpenMP, MPI, and MPI+OpenMP
// /* Count the number of edges in the graph defined by the adjacency matrix A.
//    A is an NxN adjacency matrix stored in row-major.
//    Example:
// 
// 	 input: [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [1, 1, 1, 0]]
//    output: 3
// */
// int edgeCount(std::vector<int> const& A, size_t N) {

#include <algorithm>
#include <cmath>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

#include <iostream>
#include <chrono>
#include <omp.h>

struct Context {
    std::vector<std::vector<std::vector<double>>> A, B;
    int tsteps, n;
};

void reset(Context *ctx, std::mt19937& engine) {
    for (int i = 0; i < ctx->n; i++) {
	for (int j = 0; j < ctx->n; j++) {
	    for (int k = 0; k < ctx->n; k++) {
		double val = (i + j + (ctx->n - k)) * 10.0 / (ctx->n);
	        ctx->A[i][j][k] = val;
	        ctx->B[i][j][k] = val;
	    }
	}
    }
}

Context *init() {
    Context *ctx = new Context();

    ctx->tsteps = 100;
    ctx->n = DRIVER_PROBLEM_SIZE;

    ctx->A.resize(ctx->n);
    ctx->B.resize(ctx->n);
    for (int i = 0; i < ctx->n; i++) {
        ctx->A[i].resize(ctx->n);
        ctx->B[i].resize(ctx->n);
	for (int j = 0; j < ctx->n; j++) {
	    ctx->A[i][j].resize(ctx->n);
	    ctx->B[i][j].resize(ctx->n);
	}
    }

    // reset(ctx);
    return ctx;
}

Context* copy(Context* ctx) {
    Context* new_ctx = new Context();
    *new_ctx = *ctx;
    return new_ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    submission::kernel_heat_3d(ctx->tsteps, ctx->n, ctx->A, ctx->B);
}

void NO_OPTIMIZE best(Context *ctx) {
    correct_kernel_heat_3d(ctx->tsteps, ctx->n, ctx->A, ctx->B);
}

bool validate(Context *ctx, std::mt19937& engine) {
    const size_t TEST_SIZE = DRIVER_PROBLEM_SIZE;

    int tsteps = 100;
    int n = TEST_SIZE;

    std::vector<std::vector<std::vector<double>>> A, B;
    std::vector<std::vector<std::vector<double>>> A_test, B_test;

    A.resize(n);
    B.resize(n);
    A_test.resize(n);
    B_test.resize(n);

    for (int i = 0; i < n; i++) {
        A[i].resize(n);
        B[i].resize(n);
        A_test[i].resize(n);
        B_test[i].resize(n);
	for (int j = 0; j < n; j++) {
	    A[i][j].resize(n);
	    B[i][j].resize(n);
	    A_test[i][j].resize(n);
	    B_test[i][j].resize(n);
	}
    }

    // set up input
    for (int i = 0; i < n; i++) {
	for (int j = 0; j < n; j++) {
	    for (int k = 0; k < n; k++) {
		double val = (i + j + (n - k)) * 10.0 / (n);
		A[i][j][k] = val;
		B[i][j][k] = val;
		A_test[i][j][k] = val;
		B_test[i][j][k] = val;
	    }
	}
    }

    // compute correct result
    correct_kernel_heat_3d(tsteps, n, A, B);

    // compute test result
    submission::kernel_heat_3d(tsteps, n, A_test, B_test);
    
    bool isCorrect = true;
    for (int i = 0; i < n; i++) {
	for (int j = 0; j < n; j++) {
	    if (!fequal(A[i][j], A_test[i][j], 1e-4)) {
		isCorrect = false;
		break;
	    }
	    if (!fequal(B[i][j], B_test[i][j], 1e-4)) {
		isCorrect = false;
		break;
	    }
	}
    }

    if (!isCorrect) {
	return false;
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
