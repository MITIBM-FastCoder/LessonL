// Driver for 02_dense_la_gemm for Serial, OpenMP, MPI, and MPI+OpenMP
// /* Multiply the matrix A by the matrix B. Store the results in the matrix C.
//    A is an MxK matrix, B is a KxN matrix, and C is a MxN matrix. The matrices are stored in row-major.
//    Example:
// 
//    input: A=[[1, -1, 2], [0, -2, 1]] B=[[4, 1], [-1, 0], [2, 2]]
//    output: C=[[9, 5], [4, 2]]
// */
// void gemm(std::vector<double> const& A, std::vector<double> const& B, std::vector<double> &C, size_t M, size_t K, size_t N) {

#include <algorithm>
#include <cmath>
#include <numeric>
#include <random>
#include <vector>
#include <iostream>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

struct Context {
    std::vector<std::vector<float>> imgIn, imgOut, y1, y2;
    double alpha;
    size_t w, h;
};

void reset(Context *ctx, std::mt19937& engine) {
    for (int i = 0; i < ctx->w; i++) {
        for (int j = 0; j < ctx->h; j++) {
	    ctx->imgIn[i][j] = (float) ((313*i+991*j)%65536) * 1.0 / 65535.0;
	}
    }
}

Context *init() {
    Context *ctx = new Context();

    ctx->w = DRIVER_PROBLEM_SIZE;
    ctx->h = DRIVER_PROBLEM_SIZE / 2;
    ctx->alpha = 0.25;

    ctx->imgIn.resize(ctx->w);
    ctx->imgOut.resize(ctx->w);
    ctx->y1.resize(ctx->w);
    ctx->y2.resize(ctx->w);

    for (int i = 0; i < ctx->w; i++) {
	ctx->imgIn[i].resize(ctx->h);
	ctx->imgOut[i].resize(ctx->h);
        ctx->y1[i].resize(ctx->h);
        ctx->y2[i].resize(ctx->h);
    }

    // reset(ctx);
    return ctx;
}

Context* copy(Context* ctx) {
    Context* new_ctx = new Context();
    *new_ctx = *ctx;
    return new_ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    submission::kernel_deriche(ctx->w, ctx->h, ctx->alpha, ctx->imgIn, ctx->imgOut, ctx->y1, ctx->y2);
}

void NO_OPTIMIZE best(Context *ctx) {
    correct_kernel_deriche(ctx->w, ctx->h, ctx->alpha, ctx->imgIn, ctx->imgOut, ctx->y1, ctx->y2);
}

bool validate(Context *ctx, std::mt19937& engine) {
    const size_t TEST_SIZE = DRIVER_PROBLEM_SIZE;

    int w = TEST_SIZE;
    int h = TEST_SIZE / 2;

    double alpha = 0.25;

    std::vector<std::vector<float>> imgOut_correct;
    std::vector<std::vector<float>> imgOut_test;

    std::vector<std::vector<float>> imgIn;

    std::vector<std::vector<float>> y1;
    std::vector<std::vector<float>> y2;

    imgIn.resize(w);
    imgOut_correct.resize(w);
    imgOut_test.resize(w);
    y1.resize(w);
    y2.resize(w);

    for (int i = 0; i < w; i++) {
	imgIn[i].resize(h);
	imgOut_correct[i].resize(h);
	imgOut_test[i].resize(h);
	y1[i].resize(h);
	y2[i].resize(h);
    }

    // set up input
    for (int i = 0; i < w; i++) {
	for (int j = 0; j < h; j++) {
	    imgIn[i][j] = (float) ((313*i+991*j)%65536) * 1.0 / 65535.0;
	}
    }

    // compute correct result
    correct_kernel_deriche(w, h, alpha, imgIn, imgOut_correct, y1, y2);

    // compute test result
    submission::kernel_deriche(w, h, alpha, imgIn, imgOut_test, y1, y2);
    
    bool isCorrect = true;

    for (int i = 0; i < w; i++) {
	if (!fequal(imgOut_correct[i], imgOut_test[i], 1e-4)) {
	    isCorrect = false;
	    break;
	}
    }

    if (!isCorrect) {
	return false;
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}

