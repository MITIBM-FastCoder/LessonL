// Driver for 15_graph_edge_count for Serial, OpenMP, MPI, and MPI+OpenMP
// /* Count the number of edges in the graph defined by the adjacency matrix A.
//    A is an NxN adjacency matrix stored in row-major.
//    Example:
// 
// 	 input: [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [1, 1, 1, 0]]
//    output: 3
// */
// int edgeCount(std::vector<int> const& A, size_t N) {

#include <algorithm>
#include <cmath>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

#include <iostream>
#include <chrono>
#include <omp.h>

struct Context {
    std::vector<std::vector<double>> u, v, p, q;
    int tsteps, n;
};

void reset(Context *ctx, std::mt19937& engine) {
    for (int i = 0; i < ctx->n; i++) {
	for (int j = 0; j < ctx->n; j++) {
	    ctx->u[i][j] = (i + ctx->n - j) * 1.0 / ctx->n;
	}
    }
}

Context *init() {
    Context *ctx = new Context();

    ctx->tsteps = 1000;
    ctx->n = DRIVER_PROBLEM_SIZE;

    ctx->u.resize(ctx->n);
    ctx->v.resize(ctx->n);
    ctx->p.resize(ctx->n);
    ctx->q.resize(ctx->n);
    for (int i = 0; i < ctx->n; i++) {
        ctx->u[i].resize(ctx->n);
        ctx->v[i].resize(ctx->n);
        ctx->p[i].resize(ctx->n);
        ctx->q[i].resize(ctx->n);
    }

    // reset(ctx);
    return ctx;
}

Context* copy(Context* ctx) {
    Context* new_ctx = new Context();
    *new_ctx = *ctx;
    return new_ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    submission::kernel_adi(ctx->tsteps, ctx->n, ctx->u, ctx->v, ctx->p, ctx->q);
}

void NO_OPTIMIZE best(Context *ctx) {
    correct_kernel_adi(ctx->tsteps, ctx->n, ctx->u, ctx->v, ctx->p, ctx->q);
}

bool validate(Context *ctx, std::mt19937& engine) {
    const size_t TEST_SIZE = DRIVER_PROBLEM_SIZE;

    int tsteps = 1000;
    int n = TEST_SIZE;

    std::vector<std::vector<double>> u_correct;
    std::vector<std::vector<double>> u_test;
    std::vector<std::vector<double>> v;
    std::vector<std::vector<double>> p;
    std::vector<std::vector<double>> q;

    u_correct.resize(n);
    u_test.resize(n);
    v.resize(n);
    p.resize(n);
    q.resize(n);

    for (int i = 0; i < n; i++) {
        u_correct[i].resize(n);
        u_test[i].resize(n);
        v[i].resize(n);
        p[i].resize(n);
        q[i].resize(n);
    }

    // set up input
    for (int i = 0; i < n; i++) {
    	for (int j = 0; j < n; j++) {
	    u_correct[i][j] = (i + n - j) * 1.0 / n;
	    u_test[i][j] = (i + n - j) * 1.0 / n;
	}
    }

    // compute correct result
    correct_kernel_adi(tsteps, n, u_correct, v, p, q);

    // compute test result
    submission::kernel_adi(tsteps, n, u_test, v, p, q);
        
    bool isCorrect = true;
    for (int i = 0; i < n; i++) {
	if (!fequal(u_correct[i], u_test[i], 1e-4)) {
	    isCorrect = false;
	    break;
	}
    }

    if (!isCorrect) {
        return false;
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
