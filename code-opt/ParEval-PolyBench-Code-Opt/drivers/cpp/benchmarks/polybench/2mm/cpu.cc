// Driver for 02_dense_la_gemm for Serial, OpenMP, MPI, and MPI+OpenMP
// /* Multiply the matrix A by the matrix B. Store the results in the matrix C.
//    A is an MxK matrix, B is a KxN matrix, and C is a MxN matrix. The matrices are stored in row-major.
//    Example:
// 
//    input: A=[[1, -1, 2], [0, -2, 1]] B=[[4, 1], [-1, 0], [2, 2]]
//    output: C=[[9, 5], [4, 2]]
// */
// void gemm(std::vector<double> const& A, std::vector<double> const& B, std::vector<double> &C, size_t M, size_t K, size_t N) {

#include <algorithm>
#include <cmath>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

struct Context {
    std::vector<std::vector<double>> A, B, C, D, tmp;
    int ni, nj, nk, nl;
    double alpha, beta;
};

void reset(Context *ctx, std::mt19937& engine) {
    for (int i = 0; i < ctx->ni; i++) {
	for (int j = 0; j < ctx->nk; j++) {
	    ctx->A[i][j] = ((i*j+1) % ctx->ni) * 1.0 / ctx->ni;
	}
    }

    for (int i = 0; i < ctx->nk; i++) {
	for (int j = 0; j < ctx->nj; j++) {
	    ctx->B[i][j] = (i*(j+1) % ctx->nj) * 1.0 / ctx->nj;
	}
    }

    for (int i = 0; i < ctx->nj; i++) {
	for (int j = 0; j < ctx->nl; j++) {
	    ctx->C[i][j] = ((i*(j+3)+1) % ctx->nl) * 1.0 / ctx->nl;
	}
    }

    for (int i = 0; i < ctx->ni; i++) {
	for (int j = 0; j < ctx->nl; j++) {
	    ctx->D[i][j] = (i*(j+2) % ctx->nk) * 1.0 / ctx->nk;
	}
    }
}

Context *init() {
    Context *ctx = new Context();

    ctx->alpha = 1.5;
    ctx->beta = 1.2;

    ctx->ni = DRIVER_PROBLEM_SIZE;
    ctx->nj = DRIVER_PROBLEM_SIZE / 2;
    ctx->nk = DRIVER_PROBLEM_SIZE / 4;
    ctx->nl = DRIVER_PROBLEM_SIZE / 8;

    ctx->A.resize(ctx->ni);
    ctx->B.resize(ctx->nk);
    ctx->C.resize(ctx->nj);
    ctx->D.resize(ctx->ni);
    ctx->tmp.resize(ctx->ni);

    for (int i = 0; i < ctx->ni; i++) {
	ctx->A[i].resize(ctx->nk);
    }

    for (int i = 0; i < ctx->nk; i++) {
	ctx->B[i].resize(ctx->nj);
    }

    for (int i = 0; i < ctx->nj; i++) {
	ctx->C[i].resize(ctx->nl);
    }

    for (int i = 0; i < ctx->ni; i++) {
	ctx->D[i].resize(ctx->nl);
    }

    for (int i = 0; i < ctx->ni; i++) {
	ctx->tmp[i].resize(ctx->nj);
    }

    // reset(ctx);
    return ctx;
}

Context* copy(Context* ctx) {
    Context* new_ctx = new Context();
    *new_ctx = *ctx;
    return new_ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    submission::kernel_2mm(ctx->ni, ctx->nj, ctx->nk, ctx->nl, ctx->alpha, ctx->beta, ctx->tmp, ctx->A, ctx->B, ctx->C, ctx->D);
}

void NO_OPTIMIZE best(Context *ctx) {
    correct_kernel_2mm(ctx->ni, ctx->nj, ctx->nk, ctx->nl, ctx->alpha, ctx->beta, ctx->tmp, ctx->A, ctx->B, ctx->C, ctx->D);
}

bool validate(Context *ctx, std::mt19937& engine) {
    const size_t TEST_SIZE = DRIVER_PROBLEM_SIZE;

    int ni = TEST_SIZE;
    int nj = TEST_SIZE / 2;
    int nk = TEST_SIZE / 4;
    int nl = TEST_SIZE / 8;

    std::vector<std::vector<double>> A;
    std::vector<std::vector<double>> B;
    std::vector<std::vector<double>> C;
    std::vector<std::vector<double>> tmp;

    std::vector<std::vector<double>> D_correct;
    std::vector<std::vector<double>> D_test;

    A.resize(ni);
    B.resize(nk);
    C.resize(nj);
    tmp.resize(ni);

    D_correct.resize(ni);
    D_test.resize(ni);

    for (int i = 0; i < ni; i++) {
	A[i].resize(nk);
    }

    for (int i = 0; i < nk; i++) {
	B[i].resize(nj);
    }

    for (int i = 0; i < nj; i++) {
	C[i].resize(nl);
    }

    for (int i = 0; i < ni; i++) {
	D_correct[i].resize(nl);
	D_test[i].resize(nl);
    }

    for (int i = 0; i < ni; i++) {
	tmp[i].resize(nj);
    }

    double alpha = 1.5;
    double beta = 1.2;

    // set up input
    for (int i = 0; i < ni; i++) {
	for (int j = 0; j < nk; j++) {
	    A[i][j] = ((i*j+1) % ni) * 1.0 / ni;
	}
    }

    for (int i = 0; i < nk; i++) {
	for (int j = 0; j < nj; j++) {
	    B[i][j] = (i*(j+1) % nj) * 1.0 / nj;
	}
    }

    for (int i = 0; i < nj; i++) {
	for (int j = 0; j < nl; j++) {
	    C[i][j] = ((i*(j+3)+1) % nl) * 1.0 / nl;
	}
    }

    for (int i = 0; i < ni; i++) {
	for (int j = 0; j < nl; j++) {
	    D_correct[i][j] = (i*(j+2) % nk) * 1.0 / nk;
	    D_test[i][j] = D_correct[i][j];
	}
    }

    // compute correct result
    correct_kernel_2mm(ni, nj, nk, nl, alpha, beta, tmp, A, B, C, D_correct);

    // compute test result
    submission::kernel_2mm(ni, nj, nk, nl, alpha, beta, tmp, A, B, C, D_test);
        
    bool isCorrect = true;
    for (int i = 0; i < ni; i++) {
	if (!fequal(D_correct[i], D_test[i], 1e-4)) {
	    isCorrect = false;
	}
    }

    if (!isCorrect) {
        return false;
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}

