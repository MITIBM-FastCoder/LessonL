// Driver for 15_graph_edge_count for Serial, OpenMP, MPI, and MPI+OpenMP
// /* Count the number of edges in the graph defined by the adjacency matrix A.
//    A is an NxN adjacency matrix stored in row-major.
//    Example:
// 
// 	 input: [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [1, 1, 1, 0]]
//    output: 3
// */
// int edgeCount(std::vector<int> const& A, size_t N) {

#include <algorithm>
#include <cmath>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

#include <iostream>
#include <chrono>
#include <omp.h>

struct Context {
    std::vector<double> r, y;
    size_t n;
};

void reset(Context *ctx, std::mt19937& engine) {
    for (int i = 0; i < ctx->n; i++) {
	ctx->r[i] = (ctx->n+1-i);
    }
}

Context *init() {
    Context *ctx = new Context();

    ctx->n = DRIVER_PROBLEM_SIZE;
    ctx->r.resize(ctx->n);
    ctx->y.resize(ctx->n);

    // reset(ctx);
    return ctx;
}

Context* copy(Context* ctx) {
    Context* new_ctx = new Context();
    *new_ctx = *ctx;
    return new_ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    submission::kernel_durbin(ctx->n, ctx->r, ctx->y);
}

void NO_OPTIMIZE best(Context *ctx) {
    correct_kernel_durbin(ctx->n, ctx->r, ctx->y);
}

bool validate(Context *ctx, std::mt19937& engine) {
    const size_t TEST_SIZE = DRIVER_PROBLEM_SIZE;

    int n = TEST_SIZE;

    std::vector<double> r;

    std::vector<double> y_correct;
    std::vector<double> y_test;

    r.resize(n);
    y_correct.resize(n);
    y_test.resize(n);

    // set up input
    for (int i = 0; i < n; i++) {
      r[i] = (n + 1 - i);
    }

    // compute result using baseline
    correct_kernel_durbin(n, r, y_correct);

    // compute test result
    submission::kernel_durbin(n, r, y_test);

    bool isCorrect = true;
    if (!fequal(y_correct, y_test, 1e-4)) {
	isCorrect = false;
    }

    if (!isCorrect) {
	return false;
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
