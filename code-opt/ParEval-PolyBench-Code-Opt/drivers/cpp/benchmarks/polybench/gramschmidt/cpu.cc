// Driver for 15_graph_edge_count for Serial, OpenMP, MPI, and MPI+OpenMP
// /* Count the number of edges in the graph defined by the adjacency matrix A.
//    A is an NxN adjacency matrix stored in row-major.
//    Example:
// 
// 	 input: [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [1, 1, 1, 0]]
//    output: 3
// */
// int edgeCount(std::vector<int> const& A, size_t N) {

#include <algorithm>
#include <cmath>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

#include <iostream>
#include <chrono>
#include <omp.h>

struct Context {
    std::vector<std::vector<double>> A, R, Q;
    int m, n;
};

void reset(Context *ctx, std::mt19937& engine) {
    for (int i = 0; i < ctx->m; i++) {
	for (int j = 0; j < ctx->n; j++) {
            ctx->A[i][j] = ((((i*j) % ctx->m) * 1.0 / ctx->m )*100.0) + 10;
	    ctx->Q[i][j] = 0.0;
	}
    }

    for (int i = 0; i < ctx->n; i++) {
	for (int j = 0; j < ctx->n; j++) {
	    ctx->R[i][j] = 0.0;
	}
    }
}

Context *init() {
    Context *ctx = new Context();

    ctx->n = DRIVER_PROBLEM_SIZE;
    ctx->m = DRIVER_PROBLEM_SIZE / 2;

    ctx->A.resize(ctx->m);
    ctx->Q.resize(ctx->m);
    for (int i = 0; i < ctx->m; i++) {
	ctx->A[i].resize(ctx->n);
	ctx->Q[i].resize(ctx->n);
    }

    ctx->R.resize(ctx->n);
    for (int i = 0; i < ctx->n; i++) {
	ctx->R[i].resize(ctx->n);
    }

    // reset(ctx);
    return ctx;
}

Context* copy(Context* ctx) {
    Context* new_ctx = new Context();
    *new_ctx = *ctx;
    return new_ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    submission::kernel_gramschmidt(ctx->m, ctx->n, ctx->A, ctx->R, ctx->Q);
}

void NO_OPTIMIZE best(Context *ctx) {
    correct_kernel_gramschmidt(ctx->m, ctx->n, ctx->A, ctx->R, ctx->Q);
}

bool validate(Context *ctx, std::mt19937& engine) {
    const size_t TEST_SIZE = DRIVER_PROBLEM_SIZE;

    int n = TEST_SIZE;
    int m = TEST_SIZE / 2;

    std::vector<std::vector<double>> A, R, Q;
    std::vector<std::vector<double>> A_test, R_test, Q_test;

    A.resize(m);
    Q.resize(m);
    R.resize(n);

    A_test.resize(m);
    Q_test.resize(m);
    R_test.resize(n);

    for (int i = 0; i < m; i++) {
	A[i].resize(n);
	A_test[i].resize(n);
	Q[i].resize(n);
	Q_test[i].resize(n);
    }

    for (int i = 0; i < n; i++) {
	R[i].resize(n);
	R_test[i].resize(n);
    }

    // set up input
    for (int i = 0; i < m; i++) {
	for (int j = 0; j < n; j++) {
	    A[i][j] = ((((i*j) % m) * 1.0 / m )*100.0) + 10;
	    Q[i][j] = 0.0;
	    A_test[i][j] = A[i][j];
	    Q_test[i][j] = Q[i][j];
	}
    }

    for (int i = 0; i < n; i++) {
	for (int j = 0; j < n; j++) {
	    R[i][j] = 0.0;
	    R_test[i][j] = 0.0;
	}
    }

    // compute result using baseline
    correct_kernel_gramschmidt(m, n, A, R, Q);

    // compute test result
    submission::kernel_gramschmidt(m, n, A_test, R_test, Q_test);

    bool isCorrect = true;
    for (int i = 0; i < m; i++) {
	if (!fequal(A[i], A_test[i], 1e-4)) {
	    isCorrect = false;
	    break;
	}

	if (!fequal(Q[i], Q_test[i], 1e-4)) {
	    isCorrect = false;
	    break;
	}
    }

    for (int i = 0; i < n; i++) {
	if (!fequal(R[i], R_test[i], 1e-4)) {
	    isCorrect = false;
	    break;
	}
    }

    if (!isCorrect) {
	return false;
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
