// Driver for 02_dense_la_gemm for Serial, OpenMP, MPI, and MPI+OpenMP
// /* Multiply the matrix A by the matrix B. Store the results in the matrix C.
//    A is an MxK matrix, B is a KxN matrix, and C is a MxN matrix. The matrices are stored in row-major.
//    Example:
// 
//    input: A=[[1, -1, 2], [0, -2, 1]] B=[[4, 1], [-1, 0], [2, 2]]
//    output: C=[[9, 5], [4, 2]]
// */
// void gemm(std::vector<double> const& A, std::vector<double> const& B, std::vector<double> &C, size_t M, size_t K, size_t N) {

#include <algorithm>
#include <chrono>
#include <cmath>
#include <iostream>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

struct Context {
    std::vector<std::vector<double>> A;
    std::vector<double> u1, v1, u2, v2, w, x, y, z;
    double alpha, beta;
    int n;
};

void reset(Context *ctx, std::mt19937& engine) {
    double fn = (double) ctx->n;

    for (int i = 0; i < ctx->n; i++) {
        ctx->u1[i] = i;
        ctx->u2[i] = ((i+1)/fn)/2.0;
        ctx->v1[i] = ((i+1)/fn)/4.0;
        ctx->v2[i] = ((i+1)/fn)/6.0;
        ctx->y[i] = ((i+1)/fn)/8.0;
        ctx->z[i] = ((i+1)/fn)/9.0;
        ctx->x[i] = 0.0;
        ctx->w[i] = 0.0;
        for (int j = 0; j < ctx->n; j++) {
            ctx->A[i][j] = (i*j % ctx->n) * 1.0 / ctx->n;
        }
    }
}

Context *init() {
    Context *ctx = new Context();

    ctx->n = DRIVER_PROBLEM_SIZE;
    ctx->alpha = 1.5;
    ctx->beta = 1.2;

    ctx->u1.resize(ctx->n);
    ctx->u2.resize(ctx->n);
    ctx->v1.resize(ctx->n);
    ctx->v2.resize(ctx->n);
    ctx->w.resize(ctx->n);
    ctx->x.resize(ctx->n);
    ctx->y.resize(ctx->n);
    ctx->z.resize(ctx->n);

    ctx->A.resize(ctx->n);
    for (int i = 0; i < ctx->n; i++) {
	ctx->A[i].resize(ctx->n);
    }

    // reset(ctx);
    return ctx;
}

Context* copy(Context* ctx) {
    Context* new_ctx = new Context();
    *new_ctx = *ctx;
    return new_ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    submission::kernel_gemver(ctx->n, ctx->alpha, ctx->beta, ctx->A, ctx->u1, ctx->v1, ctx->u2, ctx->v2, ctx->w, ctx->x, ctx->y, ctx->z);
}

void NO_OPTIMIZE best(Context *ctx) {
    correct_kernel_gemver(ctx->n, ctx->alpha, ctx->beta, ctx->A, ctx->u1, ctx->v1, ctx->u2, ctx->v2, ctx->w, ctx->x, ctx->y, ctx->z);
}

bool validate(Context *ctx, std::mt19937& engine) {
    const size_t TEST_SIZE = DRIVER_PROBLEM_SIZE;
    
    int n = TEST_SIZE;

    std::vector<std::vector<double>> A;
    std::vector<std::vector<double>> A_test;

    std::vector<double> u1, u2, v1, v2, w, x, y, z;
    std::vector<double> x_test, w_test;

    A.resize(n);
    A_test.resize(n);
    for (int i = 0; i < n; i++) {
	A[i].resize(n);
	A_test[i].resize(n);
    }

    u1.resize(n);
    u2.resize(n);
    v1.resize(n);
    v2.resize(n);
    w.resize(n);
    x.resize(n);
    y.resize(n);
    z.resize(n);

    x_test.resize(n);
    w_test.resize(n);

    double alpha = 1.5;
    double beta = 1.2;

    double fn = (double) n;

    // set up input
    for (int i = 0; i < n; i++) {
	u1[i] = i;
	u2[i] = ((i+1)/fn)/2.0;
	v1[i] = ((i+1)/fn)/4.0;
	v2[i] = ((i+1)/fn)/6.0;
	y[i] = ((i+1)/fn)/8.0;
	z[i] = ((i+1)/fn)/9.0;
	x[i] = 0.0;
	w[i] = 0.0;
	x_test[i] = 0.0;
	w_test[i] = 0.0;
	for (int j = 0; j < n; j++) {
	    A[i][j] = (i*j % n) * 1.0 / n;
	    A_test[i][j] = A[i][j];
	}
    }

    // compute correct result
    correct_kernel_gemver(n, alpha, beta, A, u1, v1, u2, v2, w, x, y, z);

    // compute test result
    submission::kernel_gemver(n, alpha, beta, A_test, u1, v1, u2, v2, w_test, x_test, y, z);
    
    bool isCorrect = true;

    for (int i = 0; i < n; i++) {
	if (!fequal(A[i], A_test[i], 1e-3)) {
	    isCorrect = false;
	    break;
	}
    }

    if (!fequal(w, w_test, 1e-3)) {
	isCorrect = false;
    }

    if (!fequal(x, x_test, 1e-3)) {
	isCorrect = false;
    }

    if (!isCorrect) {
	return false;
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}

