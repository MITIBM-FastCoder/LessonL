// Driver for 15_graph_edge_count for Serial, OpenMP, MPI, and MPI+OpenMP
// /* Count the number of edges in the graph defined by the adjacency matrix A.
//    A is an NxN adjacency matrix stored in row-major.
//    Example:
// 
// 	 input: [[0, 0, 0, 1], [0, 0, 0, 1], [0, 0, 0, 1], [1, 1, 1, 0]]
//    output: 3
// */
// int edgeCount(std::vector<int> const& A, size_t N) {

#include <algorithm>
#include <cmath>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

#include <iostream>
#include <chrono>
#include <omp.h>

struct Context {
    std::vector<std::vector<double>> A;
    std::vector<double> p, r, s, q;
    int m, n;
};

void reset(Context *ctx, std::mt19937& engine) {
    for (int i = 0; i < ctx->m; i++) {
	ctx->p[i] = (i % ctx->m) * 1.0 / ctx->m;
    }
    for (int i = 0; i < ctx->n; i++) {
	ctx->r[i] = (i % ctx->n) * 1.0 / ctx->n;
	for (int j = 0; j < ctx->m; j++) {
	    ctx->A[i][j] = (i * (j + 1) % ctx->n) * 1.0 / ctx->n;
	}
    }
}

Context *init() {
    Context *ctx = new Context();

    ctx->m = DRIVER_PROBLEM_SIZE;
    ctx->n = DRIVER_PROBLEM_SIZE / 2;

    ctx->A.resize(ctx->n);
    for (int i = 0; i < ctx->n; i++) {
	ctx->A[i].resize(ctx->m);
    }

    ctx->p.resize(ctx->m);
    ctx->r.resize(ctx->n);

    ctx->s.resize(ctx->m);
    ctx->q.resize(ctx->n);

    // reset(ctx);
    return ctx;
}

Context* copy(Context* ctx) {
    Context* new_ctx = new Context();
    *new_ctx = *ctx;
    return new_ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    submission::kernel_bicg(ctx->m, ctx->n, ctx->A, ctx->s, ctx->q, ctx->p, ctx->r);
}

void NO_OPTIMIZE best(Context *ctx) {
    correct_kernel_bicg(ctx->m, ctx->n, ctx->A, ctx->s, ctx->q, ctx->p, ctx->r);
}

bool validate(Context *ctx, std::mt19937& engine) {
    const size_t TEST_SIZE = DRIVER_PROBLEM_SIZE;

    int m = TEST_SIZE;
    int n = TEST_SIZE / 2;

    std::vector<double> s_correct, s_test;
    std::vector<double> q_correct, q_test;

    std::vector<std::vector<double>> A;

    std::vector<double> p;
    std::vector<double> r;

    A.resize(n);

    for (int i = 0; i < n; i++) {
	A[i].resize(m);
    }

    p.resize(m);
    r.resize(n);

    s_correct.resize(m);
    s_test.resize(m);
    q_correct.resize(n);
    q_test.resize(n);

    // set up input
    for (int i = 0; i < m; i++) {
	p[i] = (i % m) * 1.0 / m;
    }
    for (int i = 0; i < n; i++) {
	r[i] = (i % n) * 1.0 / n;
	for (int j = 0; j < m; j++) {
	    A[i][j] = (i * (j + 1) % n) * 1.0 / n;
	}
    }

    // compute correct result
    correct_kernel_bicg(m, n, A, s_correct, q_correct, p, r);

    // compute test result
    submission::kernel_bicg(m, n, A, s_test, q_test, p, r);
    
    bool isCorrect = true;
    if (!fequal(s_correct, s_test, 1e-4)) {
	std::cout << "s incorrect" << std::endl;
	isCorrect = false;
    }

    if (!fequal(q_correct, q_test, 1e-4)) {
	std::cout << "q incorrect" << std::endl;
	isCorrect = false;
    }

    if (!isCorrect) {
	return false;
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}
