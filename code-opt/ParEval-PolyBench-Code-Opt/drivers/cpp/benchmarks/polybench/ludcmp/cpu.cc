// Driver for 02_dense_la_gemm for Serial, OpenMP, MPI, and MPI+OpenMP
// /* Multiply the matrix A by the matrix B. Store the results in the matrix C.
//    A is an MxK matrix, B is a KxN matrix, and C is a MxN matrix. The matrices are stored in row-major.
//    Example:
// 
//    input: A=[[1, -1, 2], [0, -2, 1]] B=[[4, 1], [-1, 0], [2, 2]]
//    output: C=[[9, 5], [4, 2]]
// */
// void gemm(std::vector<double> const& A, std::vector<double> const& B, std::vector<double> &C, size_t M, size_t K, size_t N) {

#include <algorithm>
#include <chrono>
#include <cmath>
#include <iostream>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

struct Context {
    std::vector<std::vector<double>> A;
    std::vector<double> b, x, y;
    int n;
};

void reset(Context *ctx, std::mt19937& engine) {
    double fn = (double) ctx->n;

    for (int i = 0; i < ctx->n; i++) {
	ctx->x[i] = 0.0;
	ctx->y[i] = 0.0;
	ctx->b[i] = (i+1)/fn/2.0 + 4;
    }

    for (int i = 0; i < ctx->n; i++) {
	for (int j = 0; j <= i; j++) {
	    ctx->A[i][j] = (-j % ctx->n) * 1.0 / ctx->n + 1;
	}
	for (int j = i + 1; j < ctx->n; j++) {
	    ctx->A[i][j] = 0.0;
	}
	ctx->A[i][i] = 1.0;
    }

    /* Make the matrix positive semi-definite. */
    /* not necessary for LU, but using same code as cholesky */
    std::vector<std::vector<double>> B;
    B.resize(ctx->n);
    for (int i = 0; i < ctx->n; i++) {
	B[i].resize(ctx->n);
    }

    for (int r = 0; r < ctx->n; r++) {
	for (int s = 0; s < ctx->n; s++) {
	    B[r][s] = 0.0;
	}
    }

    for (int t = 0; t < ctx->n; t++) {
	for (int r = 0; r < ctx->n; r++) {
	    for (int s = 0; s < ctx->n; s++) {
		B[r][s] += ctx->A[r][t] * ctx->A[s][t];
	    }
	}
    }
    for (int r = 0; r < ctx->n; r++) {
	for (int s = 0; s < ctx->n; s++) {
	    ctx->A[r][s] = B[r][s];
	}
    }
}

Context *init() {
    Context *ctx = new Context();

    ctx->n = DRIVER_PROBLEM_SIZE;

    ctx->A.resize(ctx->n);

    for (int i = 0; i < ctx->n; i++) {
	ctx->A[i].resize(ctx->n);
    }

    ctx->b.resize(ctx->n);
    ctx->x.resize(ctx->n);
    ctx->y.resize(ctx->n);

    // reset(ctx);
    return ctx;
}

Context* copy(Context* ctx) {
    Context* new_ctx = new Context();
    *new_ctx = *ctx;
    return new_ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    submission::kernel_ludcmp(ctx->n, ctx->A, ctx->b, ctx->x, ctx->y);
}

void NO_OPTIMIZE best(Context *ctx) {
    correct_kernel_ludcmp(ctx->n, ctx->A, ctx->b, ctx->x, ctx->y);
}

bool validate(Context *ctx, std::mt19937& engine) {
    const size_t TEST_SIZE = DRIVER_PROBLEM_SIZE;

    int n = TEST_SIZE;

    std::vector<std::vector<double>> A;
    std::vector<std::vector<double>> A_test;

    A.resize(n);
    A_test.resize(n);

    for (int i = 0; i < n; i++) {
	A[i].resize(n);
	A_test[i].resize(n);
    }

    std::vector<double> b, x, y;
    std::vector<double> x_test, y_test;

    b.resize(n);
    x.resize(n);
    y.resize(n);
    x_test.resize(n);
    y_test.resize(n);

    /* Make the matrix positive semi-definite. */
    /* not necessary for LU, but using same code as cholesky */
    std::vector<std::vector<double>> B;
    B.resize(ctx->n);
    for (int i = 0; i < ctx->n; i++) {
	B[i].resize(ctx->n);
    }

    double fn = (double) n;

    // set up input
    for (int i = 0; i < n; i++) {
	for (int j = 0; j <= i; j++) {
	    A[i][j] = (-j % n) * 1.0 / n + 1;
	}
	for (int j = i + 1; j < n; j++) {
	    A[i][j] = 0.0;
	}
	A[i][i] = 1.0;
    }
	
    for (int r = 0; r < n; r++) {
	for (int s = 0; s < n; s++) {
	    B[r][s] = 0.0;
	}
    }

    for (int t = 0; t < n; t++) {
	for (int r = 0; r < n; r++) {
	    for (int s = 0; s < n; s++) {
		B[r][s] += A[r][t] * A[s][t];
	    }
	}
    }

    for (int r = 0; r < n; r++) {
	for (int s = 0; s < n; s++) {
	    A[r][s] = B[r][s];
	    A_test[r][s] = A[r][s];
	}
    }

    for (int i = 0; i < n; i++) {
	x[i] = 0.0;
	y[i] = 0.0;
	b[i] = (i+1)/fn/2.0 + 4;

	x_test[i] = 0.0;
	y_test[i] = 0.0;
    }
    
    // compute correct result
    correct_kernel_ludcmp(n, A, b, x, y);

    // compute test result
    submission::kernel_ludcmp(n, A_test, b, x_test, y_test);
    
    bool isCorrect = true;

    for (int i = 0; i < n; i++) {
	if (!fequal(A[i], A_test[i], 1e-4)) {
	    isCorrect = false;
	    break;
	}
    }

    if (!fequal(x, x_test, 1e-4)) {
	isCorrect = false;
    }

    if (!fequal(y, y_test, 1e-4)) {
	isCorrect = false;
    }

    if (!isCorrect) {
	return false;
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}

