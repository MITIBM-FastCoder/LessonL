// Driver for 02_dense_la_gemm for Serial, OpenMP, MPI, and MPI+OpenMP
// /* Multiply the matrix A by the matrix B. Store the results in the matrix C.
//    A is an MxK matrix, B is a KxN matrix, and C is a MxN matrix. The matrices are stored in row-major.
//    Example:
// 
//    input: A=[[1, -1, 2], [0, -2, 1]] B=[[4, 1], [-1, 0], [2, 2]]
//    output: C=[[9, 5], [4, 2]]
// */
// void gemm(std::vector<double> const& A, std::vector<double> const& B, std::vector<double> &C, size_t M, size_t K, size_t N) {

#include <algorithm>
#include <cmath>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

struct Context {
    std::vector<std::vector<std::vector<double>>> A;
    std::vector<std::vector<double>> C4;
    std::vector<double> sum;
    int nr, nq, np;
};

void reset(Context *ctx, std::mt19937& engine) {
    for (int i = 0; i < ctx->nr; i++) {
	for (int j = 0; j < ctx->nq; j++) {
	    for (int k = 0; k < ctx->np; k++) {
		ctx->A[i][j][k] = ((i*j + k) % ctx->np) * 1.0 / ctx->np;
	    }
	}
    }

    for (int i = 0; i < ctx->np; i++) {
	for (int j = 0; j < ctx->np; j++) {
	    ctx->C4[i][j] = (i*j % ctx->np) * 1.0 / ctx->np;
	}
    }
}

Context *init() {
    Context *ctx = new Context();

    ctx->nr = DRIVER_PROBLEM_SIZE / 4;
    ctx->nq = DRIVER_PROBLEM_SIZE / 2;
    ctx->np = DRIVER_PROBLEM_SIZE;

    ctx->A.resize(ctx->nr);
    ctx->C4.resize(ctx->np);

    for (int i = 0; i < ctx->nr; i++) {
	ctx->A[i].resize(ctx->nq);
	for (int j = 0; j < ctx->nq; j++) {
	    ctx->A[i][j].resize(ctx->np);
	}
    }

    for (int i = 0; i < ctx->np; i++) {
	ctx->C4[i].resize(ctx->np);
    }

    ctx->sum.resize(ctx->np);

    // reset(ctx);
    return ctx;
}

Context* copy(Context* ctx) {
    Context* new_ctx = new Context();
    *new_ctx = *ctx;
    return new_ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    submission::kernel_doitgen(ctx->nr, ctx->nq, ctx->np, ctx->A, ctx->C4, ctx->sum);
}

void NO_OPTIMIZE best(Context *ctx) {
    correct_kernel_doitgen(ctx->nr, ctx->nq, ctx->np, ctx->A, ctx->C4, ctx->sum);
}

bool validate(Context *ctx, std::mt19937& engine) {
    const size_t TEST_SIZE = DRIVER_PROBLEM_SIZE;

    int nr = TEST_SIZE;
    int nq = TEST_SIZE / 2;
    int np = TEST_SIZE / 4;

    std::vector<std::vector<std::vector<double>>> A_correct;
    std::vector<std::vector<std::vector<double>>> A_test;

    std::vector<std::vector<double>> C4;
    std::vector<double> sum;

    C4.resize(np);
    A_correct.resize(nr);
    A_test.resize(nr);
    sum.resize(np);

    for (int i = 0; i < np; i++) {
	C4[i].resize(np);
    }

    for (int i = 0; i < nr; i++) {
	A_correct[i].resize(nq);
	A_test[i].resize(nq);
	for (int j = 0; j < nq; j++) {
	    A_correct[i][j].resize(np);
	    A_test[i][j].resize(np);
	}
    }

    // set up input
    for (int i = 0; i < nr; i++) {
	for (int j = 0; j < nq; j++) {
	    for (int k = 0; k < np; k++) {
		A_correct[i][j][k] = ((i*j + k) % np) * 1.0 / np;
		A_test[i][j][k] = A_correct[i][j][k];
	    }
	}
    }

    for (int i = 0; i < np; i++) {
	for (int j = 0; j < np; j++) {
	    C4[i][j] = (i*j % np) * 1.0 / np;
	}
    }
    
    // compute correct result
    correct_kernel_doitgen(nr, nq, np, A_correct, C4, sum);

    // compute test result
    submission::kernel_doitgen(nr, nq, np, A_test, C4, sum);
    
    bool isCorrect = true;

    for (int i = 0; i < nr; i++) {
	for (int j = 0; j < nq; j++) {
	    if (!fequal(A_correct[i][j], A_test[i][j], 1e-4)) {
		isCorrect = false;
		break;
	    }
	}

	if (!isCorrect) {
	    break;
	}
    }

    if (!isCorrect) {
	return false;
    }

    return true;
}

void destroy(Context *ctx) {
    delete ctx;
}

