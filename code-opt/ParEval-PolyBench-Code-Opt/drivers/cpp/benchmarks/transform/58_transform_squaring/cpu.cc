// Driver for 55_transform_squaring
// /* Replace every element of x with the square of its value.
//    Example:
// 
//    input: [5, 1, 2, -4, 8]
//    output: [25, 1, 4, 16, 64]
// */
// void squareEach(std::vector<int> &x) {

#include <algorithm>
#include <cmath>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM


struct Context {
    std::vector<int> x;
};

void reset(Context *ctx, std::mt19937& engine) {
    std::uniform_int_distribution<> dist(-50, 50);

    auto gen = [&](){ return dist(engine); };

    std::generate(ctx->x.begin(), ctx->x.end(), gen);
    // fillRand(ctx->x, -50, 50);
    BCAST(ctx->x, INT);
}

Context *init() {
    Context *ctx = new Context();
    ctx->x.resize(DRIVER_PROBLEM_SIZE);
    // reset(ctx);
    return ctx;
}

Context* copy(Context* ctx) {
    Context* new_ctx = new Context();
    *new_ctx = *ctx;
    return new_ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    submission::squareEach(ctx->x);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctSquareEach(ctx->x);
}

bool validate(Context *ctx, std::mt19937& engine) {
    int rank;
    GET_RANK(rank);

    std::vector<int> input(DRIVER_PROBLEM_SIZE);
    std::uniform_int_distribution<> dist(-50, 50);

    auto gen = [&](){ return dist(engine); };

    std::generate(input.begin(), input.end(), gen);
    // fillRand(input, -50, 50);
    BCAST(input, INT);

    // compute correct result
    std::vector<int> correctResult = input;
    correctSquareEach(correctResult);

    // compute test result
    std::vector<int> testResult = input;
    submission::squareEach(testResult);
    SYNC();
        
    bool isCorrect = true;
    if (IS_ROOT(rank) && !std::equal(correctResult.begin(), correctResult.end(), testResult.begin())) {
        isCorrect = false;
    }
    BCAST_PTR(&isCorrect, 1, CXX_BOOL);
    if (!isCorrect) {
        return false;
    }

    return true;

    /*
    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int i = 0; i < numTries; i += 1) {
        std::vector<int> input(1024);
        fillRand(input, -50, 50);
        BCAST(input, INT);

        // compute correct result
        std::vector<int> correctResult = input;
        correctSquareEach(correctResult);

        // compute test result
        std::vector<int> testResult = input;
	submission::squareEach(testResult);
        SYNC();
        
        bool isCorrect = true;
        if (IS_ROOT(rank) && !std::equal(correctResult.begin(), correctResult.end(), testResult.begin())) {
            isCorrect = false;
        }
        BCAST_PTR(&isCorrect, 1, CXX_BOOL);
        if (!isCorrect) {
            return false;
        }
    }

    return true;
    */
}

void destroy(Context *ctx) {
    delete ctx;
}


