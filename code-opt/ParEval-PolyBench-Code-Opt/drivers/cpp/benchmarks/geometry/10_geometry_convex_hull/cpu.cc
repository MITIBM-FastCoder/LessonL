// Driver for 10_geometry_convex_hull for Serial, OpenMP, MPI, and MPI+OpenMP
// struct Point {
//     double x, y;
// };
//
// /* Find the set of points that defined the smallest convex polygon that contains all the points in the vector points. Store the result in `hull`.
//    Example:
//
//    input: [{0, 3}, {1, 1}, {2, 2}, {4, 4}, {0, 0}, {1, 2}, {3, 1}, {3, 3}]
//    output: [{0, 3}, {4, 4}, {3, 1}, {0, 0}]
// */
// void convexHull(std::vector<Point> const& points, std::vector<Point> &hull) {

#include <algorithm>
#include <cmath>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "generated-code.hpp"   // code generated by LLM
#include "baseline.hpp"

struct Context {
    std::vector<Point> points, hull;
    std::vector<double> x, y;
};

void reset(Context *ctx, std::mt19937& engine) {
    std::uniform_real_distribution<> dist(-1000.0, 1000.0);

    auto gen = [&](){ return dist(engine); };

    std::generate(ctx->x.begin(), ctx->x.end(), gen);
    std::generate(ctx->y.begin(), ctx->y.end(), gen);

    // fillRand(ctx->x, -1000.0, 1000.0);
    // fillRand(ctx->y, -1000.0, 1000.0);
    ctx->hull.resize(0);
    BCAST(ctx->x, DOUBLE);
    BCAST(ctx->y, DOUBLE);

    for (size_t i = 0; i < ctx->points.size(); i++) {
        ctx->points[i].x = ctx->x[i];
        ctx->points[i].y = ctx->y[i];
    }
}

Context *init() {
    Context *ctx = new Context();

    ctx->points.resize(DRIVER_PROBLEM_SIZE);
    ctx->x.resize(DRIVER_PROBLEM_SIZE);
    ctx->y.resize(DRIVER_PROBLEM_SIZE);
    ctx->hull.resize(0);

    // reset(ctx);
    return ctx;
}

Context* copy(Context* ctx) {
    Context* new_ctx = new Context();
    *new_ctx = *ctx;
    return new_ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    submission::convexHull(ctx->points, ctx->hull);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctConvexHull(ctx->points, ctx->hull);
}

bool validate(Context *ctx, std::mt19937& engine) {
    const size_t TEST_SIZE = DRIVER_PROBLEM_SIZE;

    std::vector<Point> points(TEST_SIZE), correct(0), test(0);
    std::vector<double> x(TEST_SIZE), y(TEST_SIZE);

    int rank;
    GET_RANK(rank);

    // set up input
    std::uniform_real_distribution<> dist(-1000.0, 1000.0);

    auto gen = [&](){ return dist(engine); };

    std::generate(x.begin(), x.end(), gen);
    std::generate(y.begin(), y.end(), gen);

    // fillRand(x, -1000.0, 1000.0);
    // fillRand(y, -1000.0, 1000.0);
    test.resize(0);
    correct.resize(0);
    BCAST(x, DOUBLE);
    BCAST(y, DOUBLE);

    for (size_t i = 0; i < points.size(); i++) {
        points[i].x = x[i];
        points[i].y = y[i];
    }

    // compute correct result
    correctConvexHull(points, correct);

    // compute test result
    submission::convexHull(points, test);
    SYNC();

    bool isCorrect = true;
    if (IS_ROOT(rank)) {
        if (test.size() != correct.size()) {
            isCorrect = false;
        } else {
            std::sort(test.begin(), test.end(), [](Point const& a, Point const& b) {
                return a.x < b.x || (a.x == b.x && a.y < b.y);
            });
            std::sort(correct.begin(), correct.end(), [](Point const& a, Point const& b) {
                return a.x < b.x || (a.x == b.x && a.y < b.y);
            });
            for (size_t i = 0; i < test.size(); i++) {
                if (std::abs(test[i].x - correct[i].x) > 1e-6 || std::abs(test[i].y - correct[i].y) > 1e-6) {
                    isCorrect = false;
                    break;
                }

                if (std::isnan(correct[i].x) || std::isnan(correct[i].y) || std::isnan(test[i].x) || std::isnan(test[i].y)) {
                    isCorrect = false;
                    break;
                }
            }
        }
    }

    BCAST_PTR(&isCorrect, 1, CXX_BOOL);
    if (!isCorrect) {
        return false;
    }

    return true;

    /*
    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        fillRand(x, -1000.0, 1000.0);
        fillRand(y, -1000.0, 1000.0);
        test.resize(0);
        correct.resize(0);
        BCAST(x, DOUBLE);
        BCAST(y, DOUBLE);

        for (size_t i = 0; i < points.size(); i++) {
            points[i].x = x[i];
            points[i].y = y[i];
        }

        // compute correct result
        correctConvexHull(points, correct);

        // compute test result
	submission::convexHull(points, test);
        SYNC();

        bool isCorrect = true;
        if (IS_ROOT(rank)) {
            if (test.size() != correct.size()) {
                isCorrect = false;
            } else {
                std::sort(test.begin(), test.end(), [](Point const& a, Point const& b) {
                    return a.x < b.x || (a.x == b.x && a.y < b.y);
                });
                std::sort(correct.begin(), correct.end(), [](Point const& a, Point const& b) {
                    return a.x < b.x || (a.x == b.x && a.y < b.y);
                });
                for (size_t i = 0; i < test.size(); i++) {
                    if (std::abs(test[i].x - correct[i].x) > 1e-6 || std::abs(test[i].y - correct[i].y) > 1e-6) {
                        isCorrect = false;
                        break;
                    }
                }
            }
        }
        BCAST_PTR(&isCorrect, 1, CXX_BOOL);
        if (!isCorrect) {
            return false;
        }
    }

    return true;
    */
}

void destroy(Context *ctx) {
    delete ctx;
}
