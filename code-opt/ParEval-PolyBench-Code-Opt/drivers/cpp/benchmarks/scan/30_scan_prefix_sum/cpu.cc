// Driver for 30_scan_prefix_sum for Serial, OpenMP, MPI, and MPI+OpenMP
// /* Compute the prefix sum of the vector x into output.
//    Example:
//
//    input: [1, 7, 4, 6, 6, 2]
//    output: [1, 8, 12, 18, 24, 26]
// */
// void prefixSum(std::vector<double> const& x, std::vector<double> &output) {

#include <algorithm>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

struct Context {
    std::vector<int64_t> x, output;
};

void reset(Context *ctx, std::mt19937& engine) {
    std::uniform_int_distribution<> dist(-100, 100);

    auto gen = [&](){ return dist(engine); };

    std::generate(ctx->x.begin(), ctx->x.end(), gen);
    // fillRand(ctx->x, -100.0, 100.0);
    BCAST(ctx->x, DOUBLE);
}

Context *init() {
    Context *ctx = new Context();

    ctx->x.resize(DRIVER_PROBLEM_SIZE);
    ctx->output.resize(DRIVER_PROBLEM_SIZE);

    // reset(ctx);
    return ctx;
}

Context* copy(Context* ctx) {
    Context* new_ctx = new Context();
    *new_ctx = *ctx;
    return new_ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    submission::prefixSum(ctx->x, ctx->output);
}

void NO_OPTIMIZE best(Context *ctx) {
    correctPrefixSum(ctx->x, ctx->output);
}

bool validate(Context *ctx, std::mt19937& engine) {
    const size_t TEST_SIZE = DRIVER_PROBLEM_SIZE;

    std::vector<int64_t> correct(TEST_SIZE), test(TEST_SIZE), input(TEST_SIZE);

    int rank;
    GET_RANK(rank);

    // set up input
    std::uniform_int_distribution<> dist(-100, 100);

    auto gen = [&](){ return dist(engine); };

    std::generate(input.begin(), input.end(), gen);
    // fillRand(input, -100.0, 100.0);
    BCAST(input, DOUBLE);
    std::fill(correct.begin(), correct.end(), 0.0);
    std::fill(test.begin(), test.end(), 0.0);

    // compute correct result
    correctPrefixSum(input, correct);

    // compute test result
    submission::prefixSum(input, test);
    SYNC();

    bool isCorrect = true;
    if (IS_ROOT(rank) && !std::equal(correct.begin(), correct.end(), test.begin())) {
        isCorrect = false;
    }
    BCAST_PTR(&isCorrect, 1, CXX_BOOL);
    if (!isCorrect) {
        return false;
    }

    return true;

    /*
    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int i = 0; i < numTries; i += 1) {
        // set up input
        fillRand(input, -100.0, 100.0);
        BCAST(input, DOUBLE);
        std::fill(correct.begin(), correct.end(), 0.0);
        std::fill(test.begin(), test.end(), 0.0);

        // compute correct result
        correctPrefixSum(input, correct);

        // compute test result
	submission::prefixSum(input, test);
        SYNC();

        bool isCorrect = true;
        if (IS_ROOT(rank) && !fequal(correct, test, 1e-6)) {
            isCorrect = false;
        }
        BCAST_PTR(&isCorrect, 1, CXX_BOOL);
        if (!isCorrect) {
            return false;
        }
    }

    return true;
    */
}

void destroy(Context *ctx) {
    delete ctx;
}
