// Driver for 26_reduce_product_of_inverses for Serial, OpenMP, MPI, and MPI+OpenMP
// /* Return the product of the vector x with every odd indexed element inverted.
//    i.e. x_0 * 1/x_1 * x_2 * 1/x_3 * x_4 ...
//    Example:
//
//    input: [4, 2, 10, 4, 5]
//    output: 25
// */
// double productWithInverses(std::vector<double> const& x) {

#include <algorithm>
#include <cmath>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

#include <iostream>
#include <cfloat>
#include <cmath>

struct Context {
    std::vector<double> x;
};

void reset(Context *ctx, std::mt19937& engine) {
    // std::uniform_real_distribution<> dist(0, 100.0);
    std::uniform_real_distribution<> dist(1.0, 1.1);

    auto gen = [&](){ return dist(engine); };

    std::generate(ctx->x.begin(), ctx->x.end(), gen);
    // fillRand(ctx->x, 0.0, 100.0);
    BCAST(ctx->x, DOUBLE);
}

Context *init() {
    Context *ctx = new Context();

    ctx->x.resize(DRIVER_PROBLEM_SIZE);

    // reset(ctx);
    return ctx;
}

Context* copy(Context* ctx) {
    Context* new_ctx = new Context();
    *new_ctx = *ctx;
    return new_ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    double val = submission::productWithInverses(ctx->x);
    (void)val;
    asm volatile ("" : "+r"(val));  // Prevents compiler from optimizing var away
}

void NO_OPTIMIZE best(Context *ctx) {
    double val = correctProductWithInverses(ctx->x);
    (void)val;
    asm volatile ("" : "+r"(val));  // Prevents compiler from optimizing var away
}

bool nearlyEqual(double a, double b, double relEpsilon = 1e-9) {
    double diff = std::fabs(a - b);
    double largest = std::fmax(std::fabs(a), std::fabs(b));

    return diff <= largest * relEpsilon;
}

bool validate(Context *ctx, std::mt19937& engine) {
    const size_t TEST_SIZE = DRIVER_PROBLEM_SIZE;

    std::vector<double> x(TEST_SIZE);

    int rank;
    GET_RANK(rank);

    // set up input
    // std::uniform_real_distribution<> dist(0, 100.0);
    std::uniform_real_distribution<> dist(1.0, 1.1);

    auto gen = [&](){ return dist(engine); };

    std::generate(x.begin(), x.end(), gen);
    // fillRand(x, 0.0, 100.0);
    BCAST(x, DOUBLE);

    // compute correct result
    double correct = correctProductWithInverses(x);

    // compute test result
    double test = submission::productWithInverses(x);
    SYNC();

    bool isCorrect = true;
    if (std::isnan(test)) {
	isCorrect = false;
    }
    // if (IS_ROOT(rank) && std::abs(correct - test) > 1e-3) {
    if (IS_ROOT(rank) && !nearlyEqual(correct, test)) {
        isCorrect = false;
    }
    if (IS_ROOT(rank) && std::isnan(correct) || std::isnan(test)) {
        isCorrect = false;
    }
    BCAST_PTR(&isCorrect, 1, CXX_BOOL);
    if (!isCorrect) {
        return false;
    }

    return true;

    /*
    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        fillRand(x, 0.0, 100.0);
        BCAST(x, DOUBLE);

        // compute correct result
        correct = correctProductWithInverses(x);

        // compute test result
        test = submission::productWithInverses(x);
        SYNC();

        bool isCorrect = true;
	if (std::isnan(test)) {
	    isCorrect = false;
	}
        if (IS_ROOT(rank) && std::abs(correct - test) > 1e-4) {
            isCorrect = false;
        }
        BCAST_PTR(&isCorrect, 1, CXX_BOOL);
        if (!isCorrect) {
            return false;
        }
    }

    return true;
    */
}

void destroy(Context *ctx) {
    delete ctx;
}
