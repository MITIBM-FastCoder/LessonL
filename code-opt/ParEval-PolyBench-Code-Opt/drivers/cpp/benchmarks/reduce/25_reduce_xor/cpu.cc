// Driver for 25_reduce_xor for Serial, OpenMP, MPI, and MPI+OpenMP
// /* Return the logical XOR reduction of the vector of bools x.
//    Example:
//
//    input: [false, false, false, true]
//    output: true
// */
// bool reduceLogicalXOR(std::vector<bool> const& x) {

#include <algorithm>
#include <cmath>
#include <numeric>
#include <random>
#include <vector>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

struct Context {
    std::vector<bool> x;
    bool result;
};

void bcastBools(std::vector<bool> &x) {
    #if defined(USE_MPI) || defined(USE_MPI_OMP)
    // cannot simply bcast a vector<bool> because it is a special case
    std::vector<char> xChar(x.size());
    for (int i = 0; i < x.size(); i += 1) {
        xChar[i] = x[i];
    }
    BCAST(xChar, CHAR);
    for (int i = 0; i < x.size(); i += 1) {
        x[i] = xChar[i];
    }
    #endif
}

void reset(Context *ctx, std::mt19937& engine) {
    std::uniform_int_distribution<> dist(0, 1);

    auto gen = [&](){ return dist(engine); };

    std::generate(ctx->x.begin(), ctx->x.end(), gen);
    /*
    for (int i = 0; i < ctx->x.size(); i += 1) {
        ctx->x[i] = get_random_bit();
    }
    */
    bcastBools(ctx->x);
}

Context* copy(Context* ctx) {
    Context* new_ctx = new Context();
    *new_ctx = *ctx;
    return new_ctx;
}

Context *init() {
    Context *ctx = new Context();

    ctx->x.resize(DRIVER_PROBLEM_SIZE);

    // reset(ctx);
    return ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    bool out = submission::reduceLogicalXOR(ctx->x);
    (void) out;
    asm volatile ("" : "+r"(out));  // Prevents compiler from optimizing var away
}

void NO_OPTIMIZE best(Context *ctx) {
    bool out = correctReduceLogicalXOR(ctx->x);
    (void) out;
    asm volatile ("" : "+r"(out));  // Prevents compiler from optimizing var away
}

bool validate(Context *ctx, std::mt19937& engine) {
    const size_t TEST_SIZE = DRIVER_PROBLEM_SIZE;

    std::vector<bool> x (TEST_SIZE);
    bool correct, test;

    int rank;
    GET_RANK(rank);

    std::uniform_int_distribution<> dist(0, 1);

    auto gen = [&](){ return dist(engine); };

    std::generate(x.begin(), x.end(), gen);

    // set up input
    /*
    for (int i = 0; i < TEST_SIZE; i += 1) {
        x[i] = rand() % 2;
    }
    */
    bcastBools(x);

    // compute correct result
    correct = correctReduceLogicalXOR(x);

    // compute test result
    test = submission::reduceLogicalXOR(x);
    SYNC();

    bool isCorrect = true;
    if (IS_ROOT(rank) && correct != test) {
        isCorrect = false;
    }
    BCAST_PTR(&isCorrect, 1, CXX_BOOL);
    if (!isCorrect) {
        return false;
    }
    return true;

    /*
    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (int trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        for (int i = 0; i < TEST_SIZE; i += 1) {
            x[i] = rand() % 2;
        }
        bcastBools(x);

        // compute correct result
        correct = correctReduceLogicalXOR(x);

        // compute test result
        test = submission::reduceLogicalXOR(x);
        SYNC();

        bool isCorrect = true;
        if (IS_ROOT(rank) && correct != test) {
            isCorrect = false;
        }
        BCAST_PTR(&isCorrect, 1, CXX_BOOL);
        if (!isCorrect) {
            return false;
        }
    }

    return true;
    */
}

void destroy(Context *ctx) {
    delete ctx;
}
