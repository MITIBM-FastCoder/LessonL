// Driver for 29_reduce_sum_of_min_of_pairs for Serial, OpenMP, MPI, and MPI+OpenMP
// /* Return the sum of the minimum value at each index of vectors x and y for all indices.
//    i.e. sum = min(x_0, y_0) + min(x_1, y_1) + min(x_2, y_2) + ...
//    Example:
//
//    input: x=[3, 4, 0, 2, 3], y=[2, 5, 3, 1, 7]
//    output: 10
// */
// int64_t sumOfMinimumElements(std::vector<int64_t> const& x, std::vector<int64_t> const& y) {

#include <algorithm>
#include <cmath>
#include <numeric>
#include <random>
#include <vector>
#include <iostream>

#include "utilities.hpp"
#include "baseline.hpp"
#include "generated-code.hpp"   // code generated by LLM

struct Context {
    std::vector<int64_t> x, y;
};

void reset(Context *ctx, std::mt19937& engine) {
    std::uniform_int_distribution<> dist(0, 100);

    auto gen = [&](){ return dist(engine); };

    std::generate(ctx->x.begin(), ctx->x.end(), gen);
    std::generate(ctx->y.begin(), ctx->y.end(), gen);
    // fillRand(ctx->x, 0.0, 100.0);
    // fillRand(ctx->y, 0.0, 100.0);
    BCAST(ctx->x, DOUBLE);
    BCAST(ctx->y, DOUBLE);
}

Context *init() {
    Context *ctx = new Context();

    ctx->x.resize(DRIVER_PROBLEM_SIZE);
    ctx->y.resize(DRIVER_PROBLEM_SIZE);

    // reset(ctx);
    return ctx;
}

Context* copy(Context* ctx) {
    Context* new_ctx = new Context();
    *new_ctx = *ctx;
    return new_ctx;
}

void NO_OPTIMIZE compute(Context *ctx) {
    int64_t val = submission::sumOfMinimumElements(ctx->x, ctx->y);
    (void)val;
    asm volatile ("" : "+r"(val));  // Prevents compiler from optimizing var away
}

void NO_OPTIMIZE best(Context *ctx) {
    int64_t val = correctSumOfMinimumElements(ctx->x, ctx->y);
    (void)val;
    asm volatile ("" : "+r"(val));  // Prevents compiler from optimizing var away
}

bool validate(Context *ctx, std::mt19937& engine) {
    const size_t TEST_SIZE = DRIVER_PROBLEM_SIZE;

    std::vector<int64_t> x(TEST_SIZE), y(TEST_SIZE);

    int rank;
    GET_RANK(rank);

    // set up input
    std::uniform_int_distribution<> dist(0, 100);

    auto gen = [&](){ return dist(engine); };

    std::generate(x.begin(), x.end(), gen);
    std::generate(y.begin(), y.end(), gen);
    // fillRand(x, 0.0, 100.0);
    // fillRand(y, 0.0, 100.0);
    BCAST(x, DOUBLE);
    BCAST(y, DOUBLE);

    // compute correct result
    int64_t correct = correctSumOfMinimumElements(x, y);

    // compute test result
    int64_t test = submission::sumOfMinimumElements(x, y);
    SYNC();

    bool isCorrect = true;
    if (IS_ROOT(rank) && correct != test) {
        isCorrect = false;
    }
    BCAST_PTR(&isCorrect, 1, CXX_BOOL);
    if (!isCorrect) {
        return false;
    }
    return true;

    /*
    const size_t numTries = MAX_VALIDATION_ATTEMPTS;
    for (double trialIter = 0; trialIter < numTries; trialIter += 1) {
        // set up input
        fillRand(x, 0.0, 100.0);
        fillRand(y, 0.0, 100.0);
        BCAST(x, DOUBLE);
        BCAST(y, DOUBLE);

        // compute correct result
        correct = correctSumOfMinimumElements(x, y);

        // compute test result
        test = submission::sumOfMinimumElements(x, y);
        SYNC();

        bool isCorrect = true;
        if (IS_ROOT(rank) && std::abs(correct - test) > 1e-4) {
            isCorrect = false;
        }
        BCAST_PTR(&isCorrect, 1, CXX_BOOL);
        if (!isCorrect) {
            return false;
        }
    }

    return true;
    */
}

void destroy(Context *ctx) {
    delete ctx;
}
